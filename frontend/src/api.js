const API_AUTH = import.meta.env.VITE_API_AUTH || "http://localhost:8081/api/v1";
const API_NOTES = import.meta.env.VITE_API_NOTES || "http://localhost:8080/api/v1";

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è access-—Ç–æ–∫–µ–Ω–∞
let accessToken = localStorage.getItem("accessToken") || null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
const setAccessToken = (token) => {
    accessToken = token;
    localStorage.setItem("accessToken", token); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
const request = async (url, method = "GET", data = null, useAuth = false) => {
    const headers = { "Content-Type": "application/json" };

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (useAuth && accessToken) {
        headers["Authorization"] = `Bearer ${accessToken}`;
    }

    const options = {
        method,
        headers,
        credentials: "include", // ‚úÖ –í–∫–ª—é—á–∞–µ–º –∫—É–∫–∏ –¥–ª—è refresh-—Ç–æ–∫–µ–Ω–∞
        body: data ? JSON.stringify(data) : null,
    };

    let response = await fetch(url, options);

    // ‚úÖ –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ (401), –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    if (response.status === 401 && useAuth) {
        console.warn("üîÑ Access-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...");
        const newToken = await authAPI.refreshToken();

        if (newToken) {
            console.log("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", newToken);
            setAccessToken(newToken);
            headers["Authorization"] = `Bearer ${newToken}`; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            response = await fetch(url, options); // ‚úÖ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        } else {
            console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.");
            logoutAndRedirectToLogin(); // ‚úÖ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            return;
        }
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–æ –≤ –æ—Ç–≤–µ—Ç–µ
    const text = await response.text();
    let json;
    try {
        json = JSON.parse(text);
    } catch (e) {
        json = text; // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –Ω–µ JSON, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
    }

    if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
    }

    return json;
};


// üîπ API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authAPI = {
    login: async (credentials) => {
        const response = await request(`${API_AUTH}/auth/login`, "PATCH", credentials);

        if (typeof response === "string") {
            setAccessToken(response);
            return { accessToken: response };
        }

        if (response.accessToken) {
            setAccessToken(response.accessToken);
        }

        return response;
    },

    logout: () => {
        setAccessToken(null); // ‚úÖ –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        localStorage.removeItem("accessToken");
        return request(`${API_AUTH}/auth/logout`, "PATCH", null, true);
    },

    verifyToken: () => request(`${API_AUTH}/auth/verify-access`, "POST", { accessToken }, true),

    refreshToken: async () => {
        try {
            const response = await fetch(`${API_AUTH}/auth/refresh`, {
                method: "GET",
                credentials: "include", // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∫—É–∫–∏
            });

            if (!response.ok) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", response.status);
                logoutAndRedirectToLogin();
                return null;
            }

            const newToken = await response.text(); // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            console.log("‚úÖ –ù–æ–≤—ã–π accessToken:", newToken);

            if (typeof newToken === "string") {
                setAccessToken(newToken);
                return newToken;
            }

            console.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω!");
            return null;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
            logoutAndRedirectToLogin();
            return null;
        }
    },

    register: (credentials) => request(`${API_AUTH}/user/register`, "POST", credentials),
};

// üîπ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
export const notesAPI = {
    getNote: (noteId) => request(`${API_NOTES}/note/${noteId}`, "GET", null, true),
    createNote: (noteData, token) => request(`${API_NOTES}/note`, "POST", noteData, true), // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω –∫–∞–∫ Bearer
    updateNote: (noteId, updatedData) => request(`${API_NOTES}/note/${noteId}`, "PUT", updatedData, true),
    deactivateNote: (noteId) => request(`${API_NOTES}/note/${noteId}`, "PATCH", null, true),
    getUserNotes: (token, page = 0) => request(`${API_NOTES}/note/list/me?page=${page}`, "GET", null, true),
    getAnalytics: (urls) => request(`${API_NOTES}/analytics/view-notes`, "POST", { urls }, true),
};

import { useNavigate } from "react-router-dom";

export const logoutAndRedirectToLogin = () => {
    console.warn("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");
    localStorage.removeItem("accessToken");
    accessToken = null;
    window.location.href = "/login"; // ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
};